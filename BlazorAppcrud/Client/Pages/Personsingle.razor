@page "/person1"
@page "/person1/{id:int}"

@inject IPersonService PersonService
@if (Id==null)
{
    <PageTitle>Create a new person details</PageTitle>
    <h3>Create a new person details</h3>
}
else
{
    <PageTitle>Edit @person.Name</PageTitle>
    <h3>Edit @person.Name</h3>
}

<EditForm Model="person" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="person.Name" class="form-control"></InputText>
    </div>
   <div>
       <label for="age">Age</label>
       <InputNumber id="age" @bind-Value=person.age class="form-control"></InputNumber>
   </div>
    <div>
        <label for="city">City</label>
        <InputText id="city" @bind-Value="person.city" class="form-control"></InputText>
    </div>
    <div>
        <label for="role">Role</label>
        <InputText id="role" @bind-Value="person.Role" class="form-control"></InputText>
    </div
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeletePerson">Delete</button>
   
</EditForm>

@code {
    [Parameter]
    public int? Id{ get; set; }
    person person = new person();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new person" : "update";
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id==null)
        {
            //create one
        }
        else{
            person = await  PersonService.GetPersonById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id==null)
        {
            await PersonService.CreatePerson(person);
        }
        else
        {
            await PersonService.UpdatePerson(person);
        }

    }

    async Task DeletePerson()
    {
        await PersonService.DeletePerson(person.id);
    }
}
